#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <chrono>
#include <condition_variable>

const int NUM_PHILOSOPHERS = 5;

std::vector<std::mutex> forks(NUM_PHILOSOPHERS);
std::vector<std::condition_variable> fork_cv(NUM_PHILOSOPHERS);
std::vector<bool> fork_taken(NUM_PHILOSOPHERS, false);

void philosopher(int id) {
    int left_fork = id;
    int right_fork = (id + 1) % NUM_PHILOSOPHERS;

    std::unique_lock<std::mutex> left_lock(forks[left_fork]);
    std::unique_lock<std::mutex> right_lock(forks[right_fork]);

    // Filozof czeka, aż oba widelce będą dostępne
    fork_cv[left_fork].wait(left_lock, [&] { return !fork_taken[left_fork]; });
    fork_cv[right_fork].wait(right_lock, [&] { return !fork_taken[right_fork]; });

    // Jedzenie
    std::cout << "Filozof " << id << " zaczyna jeść." << std::endl;
    std::this_thread::sleep_for(std::chrono::milliseconds(2000)); // Symulacja jedzenia
    std::cout << "Filozof " << id << " kończy jedzenie." << std::endl;

    // Zwolnienie widelców
    fork_taken[left_fork] = false;
    fork_taken[right_fork] = false;
    fork_cv[left_fork].notify_one();
    fork_cv[right_fork].notify_one();
}

int main() {
    // Tworzenie wątków dla filozofów
    std::vector<std::thread> philosophers;
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        philosophers.emplace_back(philosopher, i);
    }

    // Oczekiwanie na zakończenie wszystkich wątków
    for (auto& thread : philosophers) {
        thread.join();
    }

    return 0;
}
